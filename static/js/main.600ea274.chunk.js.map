{"version":3,"sources":["icons8-twitter.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","randomNum","Math","floor","random","randomColor","toString","newQuote","bind","this","setState","document","documentElement","style","setProperty","tweet","quotes","quote","author","className","id","href","target","src","twitter","alt","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4zYAAAA,EAAOC,QAAU,IAA0B,4C,6NCuD5BC,E,kDAjDd,WAAYC,GAAQ,IAAD,8BAClB,cAAMA,IACDC,MAAQ,CACZC,UAAWC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC3BC,YAAaH,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBE,SAAS,KAE5D,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBANE,E,uDAUlBC,KAAKC,SAAS,CACbT,UAAWC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC3BC,YAAaH,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBE,SAAS,Q,+BAK5DK,SAASC,gBAAgBC,MAAMC,YAC9B,UADD,WAEKL,KAAKT,MAAMK,cAGhB,IAAMU,EAAK,WAAOC,EAAOP,KAAKT,MAAMC,WAAWgB,MAApC,aACVD,EAAOP,KAAKT,MAAMC,WAAWiB,QAG9B,OACC,yBAAKC,UAAU,OACd,yBAAKC,GAAG,aACP,yBAAKA,GAAG,QAAR,IAAiBJ,EAAOP,KAAKT,MAAMC,WAAWgB,MAA9C,KACA,yBAAKG,GAAG,UAAR,KAAoBJ,EAAOP,KAAKT,MAAMC,WAAWiB,QACjD,yBAAKE,GAAG,WACP,uBACCC,KAAI,gDAA2CN,EAA3C,oBACJK,GAAG,cACHE,OAAO,UAEP,yBAAKC,IAAKC,IAASC,IAAI,kBAExB,4BAAQL,GAAG,YAAYM,QAASjB,KAAKF,UAArC,oB,GAxCYoB,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDzB,SAAS0B,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.600ea274.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons8-twitter.40c060f5.svg\";","import React from \"react\";\nimport \"./App.css\";\nimport quotes from \"./quotes.json\";\nimport twitter from \"./icons8-twitter.svg\";\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\trandomNum: Math.floor(Math.random() * 102),\n\t\t\trandomColor: Math.floor(Math.random() * 16777215).toString(16),\n\t\t};\n\t\tthis.newQuote = this.newQuote.bind(this);\n\t}\n\n\tnewQuote() {\n\t\tthis.setState({\n\t\t\trandomNum: Math.floor(Math.random() * 102),\n\t\t\trandomColor: Math.floor(Math.random() * 16777215).toString(16),\n\t\t});\n\t}\n\n\trender() {\n\t\tdocument.documentElement.style.setProperty(\n\t\t\t\"--color\",\n\t\t\t`#${this.state.randomColor}`\n\t\t);\n\n\t\tconst tweet = `\"${quotes[this.state.randomNum].quote}\" ${\n\t\t\tquotes[this.state.randomNum].author\n\t\t}`;\n\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<div id=\"quote-box\">\n\t\t\t\t\t<div id=\"text\">\"{quotes[this.state.randomNum].quote}\"</div>\n\t\t\t\t\t<div id=\"author\">- {quotes[this.state.randomNum].author}</div>\n\t\t\t\t\t<div id=\"actions\">\n\t\t\t\t\t\t<a\n\t\t\t\t\t\t\thref={`https://twitter.com/intent/tweet?text=${tweet}&hashtags=quotes`}\n\t\t\t\t\t\t\tid=\"tweet-quote\"\n\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<img src={twitter} alt=\"twitter icon\" />\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<button id=\"new-quote\" onClick={this.newQuote}>\n\t\t\t\t\t\t\tNew Quote\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}